/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*if (versions == null || versions.publishVersionName == null) {
    throw new IllegalStateException("Unable to reference publishVersionName!")
} else if (libraryGroupId == null || libraryArtifactId == null) {
    throw new IllegalStateException("Must provide libraryGroupId and libraryArtifactId!")
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}

// Default values
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

publishing {
    publications {
        release(MavenPublication) {
            groupId libraryGroupId
            artifactId libraryArtifactId
            version versions.publishVersionName

            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            artifact androidSourcesJar

            pom {
                packaging 'aar'
                name = libraryArtifactId
                description = 'Squircle IDE is a fast and free multi-language code editor for Android.'
                url = 'https://github.com/likewu/MathIDE'
                licenses {
                    license {
                        name = 'Apache 2.0 License'
                        url = 'https://github.com/likewu/MathIDE/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'massivemadness'
                        name = 'Dmitry Rubtsov'
                        email = 'dm.mironov01@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/likewu/MathIDE.git'
                    developerConnection = 'scm:git:ssh://github.com/likewu/MathIDE.git'
                    url = 'https://github.com/likewu/MathIDE/tree/master'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && it.name != null && it.version != null) {
                            // Check project module dependencies
                            def projectDependency = it.version == "unspecified"
                            if (projectDependency) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', libraryGroupId)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', versions.publishVersionName)
                                dependencyNode.appendNode('scope', "compile")
                            } else {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                dependencyNode.appendNode('scope', "runtime")
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}

afterEvaluate {
    publishReleasePublicationToSonatypeRepository.dependsOn assembleRelease
}*/